import wollok.game.*
import tanque.*
import bloques.*
import enemigos.*

program game {
	
	game.title("Juego Base") 
	game.cellSize(16)
	game.width(30)
	game.height(20)
	game.boardGround("suelo.png")
	//game.addVisual(tanque)
	/* Agregando muros laterales */
	game.width().times({i => agregadorBloques.agregarBloque(i-1, 0, new Muro())})
	game.height().times({i => agregadorBloques.agregarBloque(0, i, new Muro())})
	game.width().times({i => agregadorBloques.agregarBloque(i-1, game.height()-1, new Muro())})
	game.height().times({i => agregadorBloques.agregarBloque(game.width()-1, i-1, new Muro())})
	
	/* Agregando bloques para probar */
	game.width().times({i => agregadorBloques.agregarBloque(i-1, 5, new Hielo())})
	game.addVisual(tanque)
	game.width().times({i => agregadorBloques.agregarBloque(i-1, 15, new Acero())})
	game.width().times({i => agregadorBloques.agregarBloque(i-1, 12, new Agua())})
	game.width().times({i => agregadorBloques.agregarBloque(i-1, 10, new Arbusto())})
	
	
	agregadorBloques.agregarBloque(14, 1, aguila)
	agregadorBloques.agregarBloque(13, 1, new Ladrillos())
	agregadorBloques.agregarBloque(13, 2, new Ladrillos())
	agregadorBloques.agregarBloque(14, 2, new Ladrillos())
	agregadorBloques.agregarBloque(15, 2, new Ladrillos())
	agregadorBloques.agregarBloque(15, 1, new Ladrillos())
	
	/* Controles del Tanque */
	keyboard.up().onPressDo {tanque.direccion(arriba)
		tanque.move()
	}
	keyboard.down().onPressDo { tanque.direccion(abajo)
		tanque.move()
	}
	keyboard.left().onPressDo { tanque.direccion(izquierda)
		tanque.move()
	}
	keyboard.right().onPressDo { tanque.direccion(derecha)
		tanque.move()
	}
	
	
	/* Disparo del tanque */
	keyboard.a().onPressDo{(tanque.disparo())}
	keyboard.s().onPressDo{(tanque.superDisparo())}
		
	/* Tanques enemigos */
	 

	
	
	const posicionesInicialesDeEnemigos = [game.at(1,18),game.at(14,18),game.at(28,18)]
	game.onTick(6000, "generarEnemigos", { => 
			const tanqueE = new Enemigo(position = posicionesInicialesDeEnemigos.anyOne(),vida = 3) 
			game.addVisual(tanqueE)
			tanqueE.activarMovimiento()
			
		})		
	
	/* Colisiones */
	/*game.whenCollideDo(tanqueE, { elemento => 
		game.removeVisual(tanqueE)
			elemento.remover()
	}) */
	game.start()
}

/* Movimiento del enemigo
 * Pantalla de muerte
 * Test de da√±o de bala y vida de bloques 
 * colisiones todas juntas ?
 * Diferentes clases de enemigos
 * Mayor dificultad de enemigos en niveles
 */